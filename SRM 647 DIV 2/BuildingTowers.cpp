#include <map>
#include <set>
#include <list>
#include <cmath>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <numeric>
#include <utility>
#include <iomanip>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<Long> VL;
typedef vector<VI > VVI;
typedef pair<int,int> PII;
typedef pair<Long, Long> PLL;

const Long INF = 2000000000000000000;
const int MOD = 1000000007;

#define REP(i,b,e) for(__typeof(e) i=(b)-((b)>(e)); i!=(e)-((b)>(e)); i+=1-2*((b)>(e)))
#define SZ(a) (int(a.size()))
#define mp(a,b) make_pair(a, b)
#define fs first
#define sc second

VL X, T;
int N, K;
PLL BinSearch(Long curP, Long curH, Long nxtP, Long nxtH){
	Long tstep = (nxtP - curP), low = curH, high = curH + (tstep)*K, mxh = curH, ttgH=curH;
	while(low<=high){
		Long mid = low + ((high-low)>>1LL);
		Long stepg = (mid - curH + K - 1)/K;
		if((mid-(tstep-stepg)*K)<=nxtH){
			mxh = mid;
			ttgH = max(mid - (tstep-stepg)*K,nxtH);
			low = mid+1;
		}
		else{
			high = mid-1;
		}
	}
	ttgH = min(ttgH,(curH+(tstep*K)));
	return mp(ttgH,mxh);
}
Long SOLVE(){
	REP(i,(SZ(T)-1),0){
		if(i<0) break;
		T[i] = min(T[i],T[i+1]+(X[i+1]-X[i])*K);
	}
	Long CP=1, CH=0, tot=0;
	REP(i,0,SZ(X)){
		PLL RES = BinSearch(CP, CH, X[i], T[i]);
		CP = X[i];
		CH = RES.fs;
		tot = max(tot,RES.sc);
	}
	PLL RES= BinSearch(CP, CH, N, INF);
	return max(tot,RES.sc);
}
class BuildingTowers {
public:
	long long maxHeight(int N, int K, vector <int> x, vector <int> t) {
		::N = N;
		::K = K;
		X = VL(SZ(x));T=VL(SZ(t));
		REP(i,0,(SZ(x))){
			X[i] = static_cast<Long> (x[i]);
			T[i] = static_cast<Long> (t[i]);
		}
		return SOLVE();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	BuildingTowers *obj;
	long long answer;
	obj = new BuildingTowers();
	clock_t startTime = clock();
	answer = obj->maxHeight(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 1;
	int t2[] = {3,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1000000000;
	p1 = 1000000000;
	p2.clear() /*{}*/;
	p3.clear() /*{}*/;
	p4 = 999999999000000000ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20;
	p1 = 3;
	int t2[] = {4,7,13,15,18};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {8,22,1,55,42};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 22ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 780;
	p1 = 547990606;
	int t2[] = {34,35,48,86,110,170,275,288,313,321,344,373,390,410,412,441,499,525,538,568,585,627,630,671,692,699,719,752,755,764,772};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {89,81,88,42,55,92,19,91,71,42,72,18,86,89,88,75,29,98,63,74,45,11,68,34,94,20,69,33,50,69,54};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 28495511604ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 7824078;
	p1 = 2374;
	int t2[] = {134668,488112,558756,590300,787884,868112,1550116,1681439,1790994,1796091,1906637,2005485,2152813,2171716,2255697,2332732,2516853,2749024,2922558,2930163,3568190,3882735,4264888,5080550,5167938,5249191,5574341,5866912,5936121,6142348,6164177,6176113,6434368,6552905,6588059,6628843,6744163,6760794,6982172,7080464,7175493,7249044};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {8,9,171315129,52304509,1090062,476157338,245,6,253638067,37,500,29060,106246500,129,22402,939993108,7375,2365707,40098,10200444,3193547,55597,24920935,905027,1374,12396141,525886,41,33,3692,11502,180,3186,5560,778988,42449532,269666,10982579,48,3994,1,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1365130725ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
